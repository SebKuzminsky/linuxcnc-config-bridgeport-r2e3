
#
# This HAL file hooks up the control panel.
#
#
# Uses:
#     encoder.03 (jogwheel)
#     ilowpass.cp (to smooth the jogwheel)
#     tristate_float cp0, cp1, cp2 (to select the jog increment)
#     gpio 28 & 29 (varispeed spindle faster/slower switch input)
#
# 
# There control panel has these features:
# 
#     * a latching E-stop button
#     * 6 momentary push-buttons that do continuous jogs on all three axes
#     * a momentary push-button that turns the spindle on/off
#     * a momentary toggle switch that spins the stepper that controls the varispeed
#     * a rotary switch that selects which axis to jog: X, Y, or Z
#     * a rotary switch that selects the jog increment: 0.0001, 0.001, or 0.010
#     * a jog wheel
# 
#
#     The axis selection switch makes the selected axis.*.jog-enable True
#     and makes the others False.  The jog increment switch addresses a mux
#     to output the desired jog increment to all the axis.*.jog-scale pins.
#     The jogwheel stays connected just like now.
#
# The jog increment selector looks to hal like a bunch of bits, exactly one
# of which is True at a time, and each bit corresponds to a different value
# to feed to axis.*.jog-scale.  Heh, maybe use a mux16, and use each
# different button as a different address line, and just skip the unused
# addresses where multiple address lines are True at the same time.
#     
# Or maybe use tristate_float?  One tristate_float per jog speed, all
# hooked to a net called jog-increment, each enabled by a different bit
# from the jog speed rotary switch.
#

# loadrt ilowpass names=ilowpass.cp



#
# continuous jog
#

setp halui.jog-speed [TRAJ](MAX_LINEAR_VELOCITY_IPM)

net continuous-jog-z-plus  <= hm2_[HOSTMOT2](BOARD).0.gpio.037.in_not
net continuous-jog-z-plus  => halui.jog.2.plus

net continuous-jog-z-minus <= hm2_[HOSTMOT2](BOARD).0.gpio.038.in_not
net continuous-jog-z-minus => halui.jog.2.minus

net continuous-jog-y-plus  <= hm2_[HOSTMOT2](BOARD).0.gpio.039.in_not
net continuous-jog-y-plus  => halui.jog.1.plus

net continuous-jog-y-minus <= hm2_[HOSTMOT2](BOARD).0.gpio.048.in_not
net continuous-jog-y-minus => halui.jog.1.minus

net continuous-jog-x-plus  <= hm2_[HOSTMOT2](BOARD).0.gpio.049.in_not
net continuous-jog-x-plus  => halui.jog.0.plus

net continuous-jog-x-minus <= hm2_[HOSTMOT2](BOARD).0.gpio.050.in_not
net continuous-jog-x-minus => halui.jog.0.minus


#
# double-click +Z for "quill up"
# triple-click +Z for "presentation position"
#

setp multiclick.cp-up.max-hold-ns    250000000
setp multiclick.cp-up.max-space-ns   250000000
setp multiclick.cp-up.output-hold-ns 100000000

net continuous-jog-z-plus => multiclick.cp-up.in

net jog-up-double-click <= multiclick.cp-up.double-click-only
net jog-up-double-click => or2.halui.mdi.quill-up.in0

net jog-up-triple-click <= multiclick.cp-up.triple-click-only
net jog-up-triple-click => or2.halui.mdi.present.in0

addf multiclick.cp-up servo-thread




#
# Spindle control is a bit involved.  It's controlled by three momentary
# switches.  One is a push-button labeled "Spindle On/Off", and the other
# two are an (on)-off-(on) knob.
#
# When the spindle is off, rotate the knob ccw & push the button to start
# the spindle ccw, or rotate the knob cw and push the button to start the
# spindle cw.
#
# When the spindle is on, rotate the knob ccw to decrease the speed on the
# Varispeed, or rotate the knob cw to increase the speed.  Push the On/Off
# button to turn the spindle off.
#
# While the On/Off button is held in, the Varispeed control is inhibited.
#
# FIXME: it'd be nice to inhibit Varispeed control from when the spindle is
# turned on to when then Spindle On/Off button is released, rather than
# just while the Spindle On/Off button is held down...
#

# gpio 36 is the On/Off momentary
net spindle-button     <= hm2_[HOSTMOT2](BOARD).0.gpio.036.in_not
net not-spindle-button <= hm2_[HOSTMOT2](BOARD).0.gpio.036.in

# gpio 28 & 29 are the (on)-off-(on) momentary on the faceplace
net spindle-knob-ccw <= hm2_[HOSTMOT2](BOARD).0.gpio.028.in_not
net spindle-knob-cw  <= hm2_[HOSTMOT2](BOARD).0.gpio.029.in_not


# spindle speed control - slower
net not-spindle-button => and2.4.in0
net spindle-knob-ccw   => and2.4.in1
net varispeed-slower   <= and2.4.out
addf and2.4 servo-thread 2

# spindle speed control - faster
net not-spindle-button => and2.5.in0
net spindle-knob-cw    => and2.5.in1
net varispeed-faster   <= and2.5.out
addf and2.5 servo-thread 3




#
# spindle on/off
#
# halui.spindle.is-on is true if the spindle is spinning
#
# rising edge on halui.spindle.forward makes it go clockwise
# rising edge on halui.spindle.reverse makes it go counter-clockwise
# rising edge on halui.spindle.stop stops the spindle
#

setp oneshot.0.width 0.100
net spindle-button => oneshot.0.in
net spindle-button-oneshot <= oneshot.0.out
addf oneshot.0 servo-thread 4

net halui-spindle-is-on <= halui.spindle.is-on
net halui-spindle-is-on => not.0.in
net spindle-is-off      <= not.0.out
addf not.0 servo-thread 5

# spindle-button AND is-on => stop
net spindle-button-oneshot => and2.0.in0
net halui-spindle-is-on    => and2.0.in1
net turn-spindle-off       <= and2.0.out
net turn-spindle-off       => halui.spindle.stop
addf and2.0 servo-thread 6

# spindle-button AND (NOT is-on)
net spindle-button-oneshot   => and2.1.in0
net spindle-is-off           => and2.1.in1
net spindle-button-while-off <= and2.1.out
addf and2.1 servo-thread 7

# (spindle-button AND (NOT is-on)) and varispeed-faster => forward
net spindle-button-while-off => and2.2.in0
net spindle-knob-cw          => and2.2.in1
net spindle-cw               <= and2.2.out
net spindle-cw               => halui.spindle.forward
addf and2.2 servo-thread 8

# (spindle-button AND (NOT is-on)) and varispeed-slower => reverse
net spindle-button-while-off => and2.3.in0
net spindle-knob-ccw         => and2.3.in1
net spindle-ccw              <= and2.3.out
net spindle-ccw              => halui.spindle.reverse
addf and2.3 servo-thread 9




#
# hook up the jog-axis selector switch to the axis jog-enable pins
#

net x-jog-enable hm2_[HOSTMOT2](BOARD).0.gpio.030.in_not => axis.0.jog-enable
net y-jog-enable hm2_[HOSTMOT2](BOARD).0.gpio.031.in_not => axis.1.jog-enable
net z-jog-enable hm2_[HOSTMOT2](BOARD).0.gpio.032.in_not => axis.2.jog-enable




#
# jog increment selector
#

setp tristate-float.cp0.in 0.0000001
setp tristate-float.cp1.in 0.000001
setp tristate-float.cp2.in 0.000010

net select-jog-inc-0.0001 hm2_[HOSTMOT2](BOARD).0.gpio.033.in_not => tristate-float.cp0.enable
net select-jog-inc-0.001  hm2_[HOSTMOT2](BOARD).0.gpio.034.in_not => tristate-float.cp1.enable
net select-jog-inc-0.010  hm2_[HOSTMOT2](BOARD).0.gpio.035.in_not => tristate-float.cp2.enable

net jog-scale <= tristate-float.cp0.out
net jog-scale <= tristate-float.cp1.out
net jog-scale <= tristate-float.cp2.out

net jog-scale => axis.0.jog-scale
net jog-scale => axis.1.jog-scale
net jog-scale => axis.2.jog-scale

addf tristate-float.cp0 servo-thread
addf tristate-float.cp1 servo-thread
addf tristate-float.cp2 servo-thread




#
# My jog wheel has 50 clicks per revolution, and 4 quadrature edges per
# click.
# 
# Low-pass filter the jogwheel, and scale it so one click is 1000 counts
# coming out of the ilowpass.
#
# Then connect it to the jog input on all the axes.
#

setp ilowpass.cp.gain .02
setp ilowpass.cp.scale 250

net jogcounts_raw <= hm2_[HOSTMOT2](BOARD).0.encoder.03.count
net jogcounts_raw => ilowpass.cp.in

net jogcounts_cooked  <= ilowpass.cp.out
net jogcounts_cooked  => axis.0.jog-counts
net jogcounts_cooked  => axis.1.jog-counts
net jogcounts_cooked  => axis.2.jog-counts

addf ilowpass.cp servo-thread

